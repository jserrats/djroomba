"""
Django settings for djroomba project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

## JOM

JOM_VOTES_PER_SEASON = 3
JOM_TELEGRAM_BOT_TOKEN = os.getenv("JOM_TELEGRAM_BOT_TOKEN")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = "true" in os.getenv("DJROOMBA_DEBUG", "true").lower()

if DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "console": {"class": "logging.StreamHandler", "formatter": "simple"},
        },
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
                "style": "{",
            },
            "simple": {
                "format": "[{levelname}][{name}] {message}",
                "style": "{",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["console"],
                "level": "INFO",
                "propagate": True,
            },
            "jom": {
                "handlers": ["console"],
                "level": "DEBUG",
                "propagate": True,
                "formatter": "simple",
            },
        },
    }

else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "console": {"class": "logging.StreamHandler", "formatter": "simple"},
            "telegram": {
                "class": "telegram_handler.TelegramHandler",
                "token": os.getenv("TELEGRAM_BOT_LOG_TOKEN"),
                "chat_id": "11777981",
            },
        },
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
                "style": "{",
            },
            "simple": {
                "format": "[{levelname}][{name}] {message}",
                "style": "{",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["console"],
                "level": "WARNING",
                "propagate": True,
            },
            "jom": {
                "handlers": ["console", "telegram"],
                "level": "INFO",
                "propagate": True,
                "formatter": "simple",
            },
            "telegram_handler": {
                "handlers": ["console"],
                "level": "ERROR",
                "propagate": True,
            },
            "telegram.ext": {
                "handlers": ["console","telegram"],
                "level": "WARNING",
                "propagate": True,
            },
        },
    }

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

PROD_ALLOWED_HOSTS = [
    "{}.{}".format(os.getenv("SUBDOMAIN"), os.getenv("DOMAIN")),
    ".lan",
    ".local",  # this is not as strict as it should be, but it is intended to only be available through local trusted networks
]

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

if not DEBUG:
    ALLOWED_HOSTS = PROD_ALLOWED_HOSTS
    # this is not as strict as it should be, but it is intended to only be available through local trusted networks
    CSRF_TRUSTED_ORIGINS = [
        "http://*.local:8128",
        "http://*.lan:8128",
        "https://*.{}".format(os.getenv("DOMAIN")),
        "http://*.{}:8128".format(os.getenv("DOMAIN")),
    ]
else:
    ALLOWED_HOSTS = PROD_ALLOWED_HOSTS + [
        "localhost",
        ".localhost",
        "127.0.0.1",
        "[::1]",
        ".local",
    ]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "djroomba",
    "jom",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "djroomba.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "djroomba.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if not os.getenv("DB_HOST"):  # local
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "PORT": int(os.getenv("DB_PORT", "5432")),
            "NAME": os.environ["DB_DATABASE"],
            "USER": os.environ["DB_USER"],
            "PASSWORD": os.environ["DB_PASSWORD"],
            "HOST": os.environ["DB_HOST"],
            "NAME": "djroomba",
            'OPTIONS': {'charset': 'utf8mb4'},
        },
    }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Berlin"

DATETIME_FORMAT = "%d-%m-%Y %H:%M:%S"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
